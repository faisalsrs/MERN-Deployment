{"version":3,"sources":["views/CreatePet.js","views/SinglePet.js","views/Pets.js","views/EditPet.js","App.js","serviceWorker.js","index.js"],"names":["CreatePet","props","useState","name","setName","type","setType","desc","setDesc","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","errors","setErrors","className","onSubmit","event","preventDefault","newPet","axios","post","then","res","navigate","catch","err","console","error","response","data","message","onChange","target","value","class","SinglePet","id","pet","setPet","msg","setMsg","alreadyVoted","setAlreadyVoted","useEffect","get","onClick","idToDel","_id","delete","log","isUpvote","likeCount","put","updatedPet","Pets","pets","setPets","sort","a","b","map","idx","key","to","filteredPosts","filter","EditPet","editedPet","App","from","noThrow","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fcec5a1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { navigate } from \"@reach/router\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst CreatePet = props => {\r\n  const [name, setName] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [skill1, setSkill1] = useState(\"\");\r\n  const [skill2, setSkill2] = useState(\"\");\r\n  const [skill3, setSkill3] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const newPet = {\r\n      name,\r\n      type,\r\n      desc,\r\n      skill1,\r\n      skill2,\r\n      skill3\r\n    };\r\n\r\n    axios\r\n      .post(\"http://localhost:8000/api/pets\", newPet)\r\n      .then(res => {\r\n        navigate(\"/pets/\");\r\n      })\r\n      .catch(err => {\r\n        console.error(err.response);\r\n        if (err.response.data.name === \"MongoError\") {\r\n          setErrors({ name: { message: \"Pet Name already Exist\" } });\r\n        } else {\r\n          setErrors(err.response.data.errors);\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Know a pet needing a new home?</h1>\r\n      <div className=\"single-container\">\r\n        <h2>New Pet</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <label>Pet Name: </label>\r\n            <input\r\n              onChange={event => setName(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n            {errors.name ? (\r\n              <span className=\"error\">{errors.name.message}</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label>Pet Type: </label>\r\n            <input\r\n              onChange={event => setType(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n            {errors.type ? (\r\n              <span className=\"error\">{errors.type.message}</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label>Pet Description: </label>\r\n            <textarea\r\n              onChange={event => setDesc(event.target.value)}\r\n              type=\"text\"\r\n            ></textarea>\r\n            {errors.desc ? (\r\n              <span className=\"error\">{errors.desc.message}</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n          <div>\r\n            <label>Skill 1: </label>\r\n            <input\r\n              onChange={event => setSkill1(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Skill 2: </label>\r\n            <input\r\n              onChange={event => setSkill2(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Skill 3: </label>\r\n            <input\r\n              onChange={event => setSkill3(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n          <button class=\"btn btn-primary\">Add Pet</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreatePet;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { navigate } from \"@reach/router\";\r\nimport axios from \"axios\";\r\n\r\n// id prop comes from the URL, see routing :id\r\nconst SinglePet = ({ id }) => {\r\n  const [pet, setPet] = useState([]);\r\n  const [msg, setMsg] = useState(\"loading...\");\r\n  const [alreadyVoted, setAlreadyVoted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/pets/\" + id)\r\n      .then(res => setPet(res.data))\r\n      .catch(setMsg(\"Sumtin Wrong\"));\r\n  }, [id]);\r\n\r\n  const handleDelete = idToDel => {\r\n    axios\r\n      .delete(\"http://localhost:8000/api/pets/\" + idToDel)\r\n      .then(() => {\r\n        navigate(\"/pets/\");\r\n      })\r\n      .catch(console.log);\r\n  };\r\n\r\n  const handleVote = isUpvote => {\r\n    if (alreadyVoted) {\r\n      return;\r\n    }\r\n\r\n    if (isUpvote) {\r\n      pet.likeCount++;\r\n    }\r\n\r\n    axios\r\n      .put(\"http://localhost:8000/api/pets/\" + id, pet)\r\n      .then(res => {\r\n        const updatedPet = res.data;\r\n        setPet(updatedPet);\r\n        setAlreadyVoted(true);\r\n      })\r\n      .catch(console.log);\r\n  };\r\n\r\n  if (pet === null) {\r\n    return msg;\r\n  }\r\n\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h2>Details About: {pet.name}</h2>\r\n      <button class=\"btn btn-danger\" onClick={event => handleDelete(pet._id)}>\r\n        Adopt {pet.name}\r\n      </button>\r\n      <div className=\"single-container\">\r\n        <p>Pet Type: {pet.type}</p>\r\n        <p>Description {pet.desc}</p>\r\n        <p>Skills:</p>\r\n        <p>{pet.skill1} </p>\r\n        <p>{pet.skill2} </p>\r\n        <p>{pet.skill3} </p>\r\n        <button\r\n          onClick={event => handleVote(true)}\r\n          className=\"arrow\"\r\n          class=\"btn btn-success\"\r\n        >\r\n          {\" \"}\r\n          Like {pet.name}{\" \"}\r\n        </button>\r\n        <p>{pet.likeCount}&uarr; likes </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SinglePet;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { Link } from \"@reach/router\";\r\n\r\nconst Pets = props => {\r\n  const [pets, setPets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/pets\")\r\n      .then(res =>\r\n        setPets(\r\n          res.data.sort((a, b) => {\r\n            if (a.type < b.type) return -1;\r\n\r\n            if (a.type > b.type) return 1;\r\n\r\n            return 0;\r\n          })\r\n        )\r\n      )\r\n      .catch(console.log);\r\n  }, []);\r\n\r\n  const handleDelete = idToDel => {\r\n    axios\r\n      .delete(\"http://localhost:8000/api/pets/\" + idToDel)\r\n      .then(res => {\r\n        const filteredPosts = pets.filter(pet => pet._id !== idToDel);\r\n        setPets(filteredPosts);\r\n      })\r\n      .catch(console.log);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <h3>These pets are looking for a good home</h3>\r\n        <hr />\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Type</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {pets.map((pet, idx) => (\r\n              <tr key={idx}>\r\n                <td>{pet.name}</td>\r\n                <td>{pet.type}</td>\r\n                <td>\r\n                  <Link to={\"/pets/\" + pet._id}>Details</Link> |{\" \"}\r\n                  <Link to={\"/pets/\" + pet._id + \"/edit\"}>Edit</Link> |{\" \"}\r\n                  <button onClick={event => handleDelete(pet._id)}>\r\n                    Adopt\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pets;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { navigate } from \"@reach/router\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst EditPet = props => {\r\n  console.log(props);\r\n  const [name, setName] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [skill1, setSkill1] = useState(\"\");\r\n  const [skill2, setSkill2] = useState(\"\");\r\n  const [skill3, setSkill3] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/pets/\" + props.id)\r\n      .then(res => {\r\n        const pet = res.data;\r\n\r\n        setName(pet.name);\r\n        setType(pet.type);\r\n        setDesc(pet.desc);\r\n        setSkill1(pet.skill1);\r\n        setSkill2(pet.skill2);\r\n        setSkill3(pet.skill3);\r\n      })\r\n      .catch(console.log);\r\n  }, [props.id]);\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const editedPet = { name, type, desc, skill1, skill2, skill3 };\r\n\r\n    axios\r\n      .put(\"http://localhost:8000/api/pets/\" + props.id, editedPet)\r\n      .then(res => navigate(\"/pets/\" + res.data._id))\r\n      .catch(err => {\r\n        setErrors(err.response.data.errors);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"single-container\">\r\n      <h2>Edit {name}</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Name: </label>\r\n          <input\r\n            onChange={event => setName(event.target.value)}\r\n            value={name}\r\n            type=\"text\"\r\n          />\r\n          {errors.name ? (\r\n            <span className=\"error\">{errors.name.message}</span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n\r\n        <div>\r\n          <label>Type: </label>\r\n          <textarea\r\n            onChange={event => setType(event.target.value)}\r\n            value={type}\r\n            type=\"text\"\r\n          ></textarea>\r\n          {errors.type ? (\r\n            <span className=\"error\">{errors.type.message}</span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n\r\n        <div>\r\n          <label>Description: </label>\r\n          <input\r\n            onChange={event => setDesc(event.target.value)}\r\n            value={desc}\r\n            type=\"text\"\r\n          />\r\n          {errors.desc ? (\r\n            <span className=\"error\">{errors.desc.message}</span>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div>\r\n          <label>Skill 1: </label>\r\n          <input\r\n            onChange={event => setSkill1(event.target.value)}\r\n            value={skill1}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Skill 2: </label>\r\n          <input\r\n            onChange={event => setSkill2(event.target.value)}\r\n            value={skill2}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Skill 3: </label>\r\n          <input\r\n            onChange={event => setSkill3(event.target.value)}\r\n            value={skill3}\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <button class=\"btn btn-primary\">Edit Pet</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPet;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Link, Redirect, Router } from \"@reach/router\";\n\nimport CreatePet from \"./views/CreatePet\";\nimport SinglePet from \"./views/SinglePet\";\nimport Pets from \"./views/Pets\";\nimport EditPet from \"./views/EditPet\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"container\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <h1>Pet Shelter</h1>\n          </div>\n          <div class=\"col\">\n            <Link to=\"/pets/new\">Add a pet to the shelter</Link>\n          </div>\n          <div class=\"col\">\n            <Link to=\"/pets/\">Back to home</Link>\n          </div>\n        </div>\n      </div>\n      <div className=\"container-flex justify-content-center\">\n        <Router>\n          <Redirect from=\"/\" to=\"/pets\" noThrow=\"true\" />\n          <CreatePet path=\"/pets/new\" />\n          <SinglePet path=\"/pets/:id\" />\n          <Pets path=\"/pets\" />\n          <EditPet path=\"/pets/:id/edit\" />\n        </Router>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}